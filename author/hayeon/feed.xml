<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator>
  <link href="/author/hayeon/feed.xml" rel="self" type="application/atom+xml" />
  <link href="/" rel="alternate" type="text/html" />
  <updated>2021-03-04T01:17:47+09:00</updated>
  <id>/author/hayeon/feed.xml</id>

  
  
  

  
    <title type="html">SjMogakko.github.io | </title>
  

  
    <subtitle>세종대 새내기 모각코</subtitle>
  

  

  
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
  

  
  

  
    <entry>
      <title type="html">2월 마지막 주(코딩도장)</title>
      <link href="/Feb.last.md" rel="alternate" type="text/html" title="2월 마지막 주(코딩도장)" />
      <published>2021-02-28T23:13:00+09:00</published>
      <updated>2021-02-28T23:13:00+09:00</updated>
      <id>/Feb.last.md</id>
      <content type="html" xml:base="/Feb.last.md">&lt;h1 id=&quot;코딩도장-책-unit-10_-상수-사용하기-02-22&quot;&gt;코딩도장 책 Unit 10_ 상수 사용하기 (02-22)&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;리터럴 사용 시 주의:&lt;/p&gt;

    &lt;p&gt;문자열 -&amp;gt; 큰 따옴표(%s), 문자하나-&amp;gt;작은 따옴표(%c)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;정수 리터럴&lt;/p&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;구분&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;10진수&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;8진수&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;16진수&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;서식 지정자(format specifier)&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;%d&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0%o&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0x%X&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;진수 변환&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;10진수&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;2진수&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;8진수&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;16진수&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0000&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;00&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0001&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;01&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0010&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;02&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;:&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;:&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;:&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;7&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0111&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;07&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;7&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;8&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1000&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;10&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;8&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;9&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1001&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;11&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;9&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;10&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1010&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;12&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;A&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;11&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1011&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;13&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;B&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;:&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;:&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;:&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;15&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1111&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;17&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;F&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;16&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;10000&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;20&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;10&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;17&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;10001&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;21&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;11&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;마크다운 표 가운데 정렬 ==
|:–:|&lt;/p&gt;

&lt;p&gt;실수 리터럴(끝에)
float|long double|지수표기
|:–:|:–:|:–:|
f / F|l \ L|e / E&lt;/p&gt;

&lt;p&gt;ex)&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;printf((&quot;%f&quot;,0.1f), printf(&quot;%f&quot;,0.1F)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;상수-사용하기&quot;&gt;상수 사용하기&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;const 자료형 상수이름 =값;&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;Python 과 달리 상수 선언 한번하면 값 바꿀 수 x&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   const int con1=1;
   con1=2;

   ERROR!!!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;추가&amp;gt; 자료형 const 상수이름=값; 도 가능&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;unit-11_-입력-값을-변수에-저장하기-02-23&quot;&gt;Unit 11_ 입력 값을 변수에 저장하기 (02-23)&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;정수/실수 입력받기(서식지정자만 바꿔주면 됌.)&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;scnaf(서식 지정자, 변수의 주소);&lt;/strong&gt;&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; #define _CRT_SECURE_NO_WARNINGS
 #include &amp;lt;stdio.h&amp;gt;

 int main()
 {
     int num1;

     printf(&quot;점수를 입력하세요:&quot;);
     scanf(&quot;%d&quot;, &amp;amp;num1);
     // 표준 입력을 받아서 그 메모리 주소를 변수에 저장(변수 초기화)

     printf(&quot;%d\n&quot;, num1);

     return 0;

 }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;scanf 는 나온지 오래된 함수라 입력값의 길이를 설정할 수가 없어 보안에 취약하므로 #define _CRT….을 써서 보안경고로 인한 컴파일 에러를 방지하는 코드를 써줘야 한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;문자 입력받기&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; #define _CRT_SECURE_NO_WARNINGS
 #include  &amp;lt;stdio.h&amp;gt;

 int main()
 {
     char c1;

     printf(&quot;문자입력: &quot;);
     scanf(&quot;%c&quot;, &amp;amp;c1);

     printf(&quot;%c\n&quot;, c1);

     return 0;
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;scanf 함수 대신 getchar 함수나 putchar 함수를 사용해도 문자를 입력받을 수 있다.
```
  #include &lt;stdio.h&gt;&lt;/stdio.h&gt;&lt;/p&gt;

    &lt;p&gt;int main()
  {
      char c1=getchar();
      printf(“c\n”, c1);&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; return 0;   }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
# Unit 12_ 덧셈, 뺄셈하기 (02-23)

파이썬과의 차이점
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;#include &lt;stdio.h&gt;&lt;/stdio.h&gt;&lt;/p&gt;

&lt;p&gt;int main()
{
    int num1;
    int num2;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;num1 = 1 + 2;
num2 = 1 - 2;

printf(num1);
printf(num2);

return 0; } ``` 이러면 출력 안 됨. 무조건 서식 지정자 사용해야. ``` #include &amp;lt;stdio.h&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;int main()
{
    int num1;
    int num2;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;num1 = 1 + 2;
num2 = 1 - 2;

printf(&quot;%d\n&quot;, num1);
printf(&quot;%d\n&quot;, num2);

return 0; } ```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;unit-13_-증가-감소-연산자-사용하기-02-23&quot;&gt;Unit 13_ 증가, 감소 연산자 사용하기 (02-23)&lt;/h1&gt;

&lt;p&gt;변수 ++;  or ++변수; —–&amp;gt; 값을 1 증가시킴&lt;/p&gt;

&lt;p&gt;변수 –; or –변수; —–&amp;gt; 값을 1 감소시킴&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;후위 연산자&lt;/strong&gt; (연산을 나중에 처리한다.)&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;A 변수의 값을 B 변수에 할당&lt;/li&gt;
  &lt;li&gt;B는 그대로 있고 A만 +1(-1)&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;

int main()
{
    int num1=2;
    int num2;

    num2=num1++

    printf(&quot;%d&quot;, num2);

    return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;num1은 2, num2는 3&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;전위 연산자&lt;/strong&gt; (연산을 먼저 처리한다.)&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;A에 +1(-1)&lt;/li&gt;
  &lt;li&gt;A 변수의 값을 B에 할당&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;

int main()
{
    int num1=2;
    int num2;

    num2=++num1

    printf(&quot;%d&quot;, num2);

    return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;num1도 3, num2도 3&lt;/p&gt;

&lt;h1 id=&quot;unit14_-곱셈나눗셈하기-02-24&quot;&gt;Unit14_ 곱셈,나눗셈하기 (02-24)&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;python에서 7/2-&amp;gt;3.5
c에서 7/2하면 3 나옴&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;C언어에서는 정수끼리 나눗셈을 하면 결과도 정수가 나온다.
(살수끼리 나눗셈을 하면 소수점 이하 자리까지 계산된다.)&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;정수를 그냥 0으로 나누면 컴파일 에러발생(중단)&lt;/p&gt;

    &lt;p&gt;0을 변수에 저장해서 0으로 나누면 중단은 되지 않으나 실행창에서 에러 뜸.&lt;/p&gt;

    &lt;p&gt;but (실수 나눗셈에서) 변수에 0.0을 저장해서 0으로 나누면 실행이 중단되지 않고 inf 무한대가  나온다.(p1336 참고)&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; #include &amp;lt;stdio.h&amp;gt;

 int main()
 {
     float num1=3.0f
     float num2=0.0f
     float num3;

     num3=num1/num2;

     printf(&quot;%f&quot;,num3);

     return 0;
 }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;-&amp;gt; inf 출력&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;참고&gt;

0/10=0

10/0=ERROR

**실수계산에서는 계산결과에서 오차가 발생한다.(코딩도장p1333참고)**


# Unit 15_나머지 연산하기 (02-24)

1. 나머지연산(%)은 정수에서만 사용가능. 실수에서는 사용 불가능 (ERROR 발생!. but&lt;math.h&gt; 해더 파일을 사용하면 가능.p197참조)

2. 음수의 나머지 연산.
    a/b에서 a의 부호를 따른다.(b 부호는 무시)


# Unit 16_자료형의 확장과 축소 (02-24)

## 형 확장
정수와 실수를 같이 연산하면 출력은 실수형으로 된다. (표현범위가 큰 쪽)

크기가 다른 정수끼리 연산했을때도 마찬가지.

ex)
int(4byte)형과 longlong(8byte)을 같이 썼을 때-&amp;gt; longlong으로 출력.

## 형 축소(값 손실 발생)
char과 int를 함께 연산한 뒤 char에 저장하면 char 보다 큰 숫자는 저장할 수 없다.

ex)

char=28;
int=100000002;
char이 1byte니까 int형에서 1byte만 유효하고  나머지는 버려진다. (이진수)

100000002(10)-&amp;gt;0011 1011 1001 1010 1100 1010 0000 0010(2) 에서 뒤에 1byte인 0000 0010 만 사용.

$$ 마크다운 내부 링크 걸고 싶으면[보여질 글씨](#해더 이름) 쓰면 된다. 해더 이름의 띄어쓰기는'_'로 처리한다.$$


# Unit17_ if 조건문 (02-25)

1. 문법  
if (조건식)  
    ```
    if (num1==10)
    {
        printf(&quot;10입니다.&quot;);
    }
    ```

    (뒤에 ; 안씀)

    만약 if 조건문 끝에 세미콜론이 붙어있으면 if는 제대로 동작하지 않고 뒤에 오는 코드가 무조건 실행되어 버린다.

    ```
    if (num1==10);

    printf(&quot;10입니다.&quot;);
    ```
    if와 printf는 전혀 관계가 없이 떨어진 상태가 됨-&amp;gt;조건식이 어떻든 printf는 항상 실행된다.  

    &lt;span style=&quot;color:red&quot;&gt;주의&lt;/span&gt;  
    if 뒤에 세미콜론을 붙여도 컴파일 에러가 나지 않기 때문에 문제를 발견하기가 쉽지 않다 조심하자  



    # Unit 18_else 사용하여 분기하기(02-25)

    else도 세미콜론을 붙이지 않는다!!
    세미콜론 붙이면 if 의 결과와는 관계없이 항상 실현됨!!!!!

    C에서는 0을 거짓, 0이 아닐 때를 참으로 동작함.
    ```
    #include &lt;stdio.h&gt;

    int main()
    {
        if (2)
        {
            printf(&quot;참&quot;);
        }
        else
        {
            printf(&quot;거짓&quot;);
        }
        return 0;
    }
```
출력:참  


    ```
    #include &lt;stdio.h&gt;

    int main()
    {
        if (0)
        {
            printf(&quot;참&quot;);
        }
        else
        {
            printf(&quot;거짓&quot;);
        }
        return 0;
    }
```  
출력: 거짓

++ 경고 수준 조정 Wparenthese
(p228 참고)

# Unit 19_ else if를 사용하여 여러 방향으로 분기 (02-25)
```
    else if (조건식)  //else if에 조건식을 지정하지 않으면 컴파일 에러 발생
```
if 조건문 안에 if 조건문은 63개 까지 중첩할 수 있다.  


# Unit 20_ 비교 연산자와 삼항 연산자 사용
## 1. 조건부 연산자
?:   
조건식이 참이면 ':'앞의 값을 반환, 거짓이면 ':' 뒤의 값을 반환  
ex) x ? a : b

## 2. 비교 연산자
참이면 1, 거짓이면 0 출력
```
#include &lt;stdio.h&gt;

int main()
{
    int num1 = 10;

    printf(&quot;%d\n&quot;, num1 == 10);
    printf(&quot;%d\n&quot;, num1 != 10);

    return 0;
}
```
한 숫자만 not 연산하기
```
if (!num1)
printf(&quot;참&quot;);
```

## 3. 삼항 연산자
```
#include &lt;stdio.h&gt;
int main()
{
    int num1=5;
    int num2;

    if (num1)
    num2=100;

    else
    num2=200;

    printf(&quot;%d\n&quot;, num2);

    return 0;
}
```
출력:100

num1에 저장된 5는 0이 아닌 값이므로 참이다. 따라서 num2에는 100이 할당 됨.  
```
#include &lt;stdio.h&gt;
int main()
{
    int num1=5;
    int num2;

    num2=num1 ? 100 : 200;
    //num1이 참이면(0이아니면) num2=100, num1이 거짓이면(0이면) num2=200

    printf(&quot;%d\n&quot;, num2);

    return 0;
}
```  
---&amp;gt;삼항 연산자는 if , else로 분기하는 부분을 한 줄로 간단하게 줄일 수 있다.

```
num2=(num1==10) ? 100 : 200;
```
과 같이 쓸수도 있다. num1==10일때는 num2=100.

# Unit 21_ 논리 연산자

연산자|설명
|:--:|:--:|
&amp;amp;&amp;amp;|AND
kk|OR
!|NOT

(k==|)

1. &amp;amp;&amp;amp;은 두 값이 모두 참이라야 결과가 참.  
- 2&amp;amp;&amp;amp;0 이면 거짓임(0 있으니까)  
- 2&amp;amp;&amp;amp;3은 참임( 0없으니까)

2. ||은 두 값 중 하나만 참이라도 결과가 참이 나옴.   
0||0만 거짓임. 0출력

```
printf(~~~~

&quot;%d&quot;,!1  // 원래의 반대.1은 참인데 !1이니까 거짓임-&amp;gt;0출력
&quot;%d&quot;,!0  // 0은 거짓인데 !0이니까 참-&amp;gt; 1출력
&quot;%d&quot;,!3 // 3은 참인데 !3이니까 거짓-&amp;gt;0출력
```

# Unit 22_불 자료형


1. &lt;stdbool.h&gt; 해더 파일 이용.
- bool, true, false 가 저장 되어 있음.
- 0은 거짓, 0아니면 참으로 했지만 이 해더파일 사용하면 true를 참으로 false를 거짓으로 나타낼 수 있다.  
    ```
    if (b1==true)
        printf(&quot;참&quot;);
    ```

- 하지만 출력할 때는 정수 출력처럼 %d 사용한다.
    ```
    printf(&quot;%d&quot;, true&amp;amp;&amp;amp;true);
    ```
2. 1byte 임  *(int는 4byte)*

3. 전용 서식  지정자 x.  

++삼항 연산자는 조건식 뿐만아니라 참, 거짓 값으로도 판단할 수 o
```
#include &lt;stdio.h&gt;
#include &lt;stdbool.h&gt;

int main()
{
    bool b1 = true;
    printf(b1 ? &quot;true&quot; : &quot;faflse&quot;);
    return 0;
}
```
--&amp;gt;출력: true  

다른 자료형은 해더파일 없이 사용할 수 있는데 bool은 해더 파일을 포함하는 이유?  
char, int등의 자료형은 C언어가 나올 떄부터 있었지만 bool은 나중에 추가된 자료형이기 때문이다.  
해더 파일 없이 불 자료형을 사용하려면 _Bool로 선언해야 한다.   

# Unit 23_비트 연산자 (02-25, 02-27)
연산자|설명
|:--:|:--:|
&amp;amp;|비트 AND
kk|비트OR
^|비트XOR
~|비트NOT
&amp;lt;&amp;lt;|비트를 왼쪽시프트
aa|비트 오른쪽 시프트
&amp;amp;=|비트 AND연산후 할당
k=|비트OR연산후 할당
^=|비트XOR연산후 할당
&amp;lt;&amp;lt;=|비트왼쪽시프트할당
aa=|비트오른쪽시프트할당

( k= | , a = &amp;gt;)  

&lt;설명&gt;
1. ^ 연산자(비트 XOR) 두 비트가 다를 때 (참)1임  
    따라서 1^1, 0^0 일때는 모두 0이다.
2. ~연산자(비트 NOT) 0은 1로 1은 0으로 바꾼다.(비트 반전)

&lt;주의&gt;  
부호 영향 받지 않도록(맨 처음 비트가 1이면 음수) unsigned char을 사용한다.
```
unsigned char num1= 162;
```

num1=num1&amp;amp;5  
&amp;lt;=&amp;gt; num1&amp;amp;=5
# Unit 24_비트 연산자 응용(02-25, 02-27)
1. 시프트 연산으로 자릿수를 넘어설 때는 과감하게 버린다.

    ```
    unsigned char num1=240;       //1111 0000
    unsigned char num3;

    num3==num1&amp;lt;&amp;lt;2;               //1100 0000
    ```
    -&amp;gt;첫째 자리나 마지막 자리를 넘어서는 비트는 그대로 사라짐.

2. 부호 있는 자료형의 비트 연산  
    unsigned일 때는 시프트 연산 후 모자라는 공간은 모두 부호비트의 값인 0으로 채웠다.  
    마찬가지로 음수일 때도 모자라는 공간은 (맨 처음=시프트하기전이 아니라 지금 연산의)부호 비트인 1로 모자라는 공간을 채운다.

    1000 1000&amp;lt;&amp;lt;1 하면 1000 1000이 음수여서 모자라는 공간을 1로 채우는게 아니라, 한칸 시프트 하면 맨 앞자리가 0이 오니까 양수로 판단해서 모자라는 공간을 0으로 채운다.
    -&amp;gt;0001 0000

    ## !!헷갈리는 연산!!
    1000 1000 &amp;lt;&amp;lt;1 =0001 0000  
    1000 0000 &amp;gt;&amp;gt;1 =1100 0000


3. 비트 켜고 끄기

- 플래그의 비트 켜기  
    **플래그|=마스크**
    (여기서 마스크는 10진수)

    ```
    unsigend char flag = 0;

    flag |=1;

    ```


- 플래그의 비트 끄기  
    **플래그 &amp;amp;=마스크**
    ```
    unsigend char flag = 7; //0000 0111

    flag &amp;amp;=~2;    //1111 1101 마스크  값 2의 비트틑 뒤집은 뒤 비트 AND로 일곱번째 비트를 끔.
    ```

    --&amp;gt; &amp;amp;를 사용할 때 : 1은 아무 능력이 없음. 원래 값을 유지하는 기능 뿐임.   
            0을 사용할 때 0으로 바뀜.


- 비트가 켜져 있다면 끄고 꺼져있다면 켜기(토글하기)  
    **플래그^=마스크**  


flag  0000 0000  
mask  0000 0100  (OR연산)  
ㅡㅡㅡㅡㅡㅡㅡㅡ  
flag  0000 0100  

# Unit 25_ 연산자 우선순위

우선 순위 1위만 나타내며, 자세한 순위에 따른 연산자는 코딩도장 책 p305참고 바람.

연산자|설명|결합방향
|:--:|:--:|:--:|
x++|증가연산자|-&amp;gt;
x--|감소연산자|&quot;
()|함수 호출|&quot;
[]|배열 첨자|&quot;
-&amp;gt;|포인터로 요소 선택|&quot;
x=는 변수

10 + 2 / (5-3) * ++3 = 14

&amp;lt;&amp;lt;보다 +의 우선순위가 더 높다.

Q. 비트 연산자는 어디에 사용?  
--&amp;gt;간단한 암호화에 사용됨.
```
#include &lt;stdio.h&gt;
int main()
{
    int plane =100;  //암호화 할 숫자
    int key = 58;  //암호키

    int encrypted = plane ^ key;
    printf(&quot;%d\n&quot;, encrypted);  //암호화

    int decrypted = encrypted ^ key;
    printf(&quot;%d\n&quot;, decrypted);  //복호화
    return 0;
}
```
XOR암호화는 너무 간단하게 풀리기 때문에 AES,RSA등을 실무에서 사용.  
(코딩도장 p319)

스와이프
1. 제 3의 변수 선언(python이랑 똑같)
2. XOR 연산자를 세번 사용해서.
```
a=a^b  
b=a^b  
a=a^b  
```

# Unit26_ Switch 분기문
- 형식이 균일하며 처리해야 할 조건이 많을 때 사용.

```
#define _CRT_SECURE_NO_WARNINGS
#include &lt;stdio.h&gt;

int main()
{
    int num1;

    scanf(&quot;%d&quot;, &amp;amp;num1);

    switch (num1)
    {
    case 1:                       //num1이 1일 때
        printf(&quot;1입니다.\n&quot;);
        break;        
    case 2:
        printf(&quot;2입니다.\n&quot;);
        break;

    default:
        printf(&quot;다시눌럿!!!!\n&quot;);
        break;

    }
    return 0;
}
```

case 다음에는 반드시 값(리터럴)이 와야 함.
변수나 조건식이 올 수 없다.

&lt;정리&gt;
문법|바뀌는 거
|:--:|:--:|
else if|값, 조건식
switch|값

break를 생략하면 그 다음에 있는 case나 default가 계속 실행된다.

이를 응용하면 or 사용가능.

```
switch(num1)
{

    case 1;   //num1=1일 때
    case 2;
    printf(&quot;1또는 2입니다.\n&quot;);
    break;

}
```
!! switch에서 판별할 변수는 정수 자료형만 사용할 수 있다.  실수 자료형인 float,double은 사용할 수 없다. (char도 정수 자료형임)

# Unit27_ for 반복문 (02-27)

```
for (초기식; 조건식; 변화식)    ///loop statement
{
    반복할 코드       //loop body
}
```
```
for (int i=0; i&amp;lt;100; i++)
```
for 문에서 선언한 변수는 for루프 밖에서는 사용할 수 없다.
만약 사용하고 싶다면
```
int i;
for (i=0;i&amp;lt;100;i++0)
```
이렇게 for 문 밖에서 변수 선언해줘야 한다.

for 반복문은 if 조건문과 마찬가지로 끝에 ;을 붙이면 안 됨!!!  
; 붙이면 반복 되지 않고 한번만 실행됨.


for문의 loop body에서 중괄호를 묶어주지 않으면 첫번째 줄만 반복되고 그 다음줄부터는 한번만 실행된다.
```
for (int i=0; i&amp;lt;5; i++)
printf(&quot;Hello\n&quot;);
printf(&quot;MMM\n&quot;);
```
출력

Hello  
Hello  
Hello  
Hello  
Hello  
MMM


i를 따로 선언하지 않고 count를 그대로 사용할 수도.
```
int count;

scanf(&quot;%d&quot;,&amp;amp;count);

for (;count&amp;gt;0; count--)   // 초깃값 없이 scanf에서 사용한 변수를 감소시켜서 반복.
{
    printf(&quot;Hello world %d\n&quot;, count);

}
return 0;
}
```
또는 초기식 부분에서 scanf 함수를 호출할 수도..
for (scanf(&quot;%d&quot;, &amp;amp;count); count&amp;gt;0; count--)

```
#define _CRT_SECURE_NO_WARNINGS
#include &lt;stdio.h&gt;
int main()
{
    int i;
    for (i= 10; i &amp;gt;= 1; i--)
    {
        printf(&quot;%d&quot;,i); ##############
    }
    printf(&quot;\n%d&quot;, i);  ##############
    return 0;
}
```
Python이랑 헷갈릴 수 있는 부분.  
loop body에서는 loop statement의 조건을 만족할 때만 실행된다!!!!!!!!

++중단==ctrl+C  
++난수인데 10 미만의 숫자로 만들고 싶다?? -&amp;gt; 난수에 %10하면 된다.
# Unit28_ while 반복문

```
초기식
while (조건식)    //loop statement
{                     /
    반복할 코드         loop body
    변화식
}                     /
```

1. for 과 마찬가지로 while도 뒤에 ;을  붙이면 안 됨.
; 붙이면 아무것도 출력되지 않고 중괄호 안에 있는 변화식은 전혀 실행되지 않는다.

2. while 로  무한루프 만들기  
**while (1)**  
or  
**while (true)**
*bool 사용해서*
&lt;/stdio.h&gt;&lt;/정리&gt;&lt;/stdio.h&gt;&lt;/stdio.h&gt;&lt;/주의&gt;&lt;/설명&gt;&lt;/stdbool.h&gt;&lt;/stdio.h&gt;&lt;/stdbool.h&gt;&lt;/stdio.h&gt;&lt;/stdio.h&gt;&lt;/stdio.h&gt;&lt;/stdio.h&gt;&lt;/stdio.h&gt;&lt;/math.h&gt;&lt;/참고&gt;</content>

      
      
      
      
      

      <author>
          <name>hayeonBaek</name>
        
        
      </author>

      

      
        <category term="Hayeon" />
      

      
        <summary type="html">코딩도장 책 Unit 10_ 상수 사용하기 (02-22)</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">2021-02-20 백하연</title>
      <link href="/realhayeon" rel="alternate" type="text/html" title="2021-02-20 백하연" />
      <published>2021-02-20T23:13:00+09:00</published>
      <updated>2021-02-20T23:13:00+09:00</updated>
      <id>/realhayeon</id>
      <content type="html" xml:base="/realhayeon">&lt;h1 id=&quot;feb_third-week&quot;&gt;Feb_third week&lt;/h1&gt;
&lt;h2 id=&quot;goal&quot;&gt;Goal&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;C포자를 위한=&quot;&quot; C언어=&quot;&quot;&gt;. p117-p176(변수,printf,연산자,형변환)


&lt;/C포자를&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Do it! C언어 입문 Youtube 강의 매일 1강씩 듣기
https://youtu.be/-JNTP5D8-1A&lt;/p&gt;

    &lt;p&gt;2-1. 3강 12:56 bit/byte 공부하기
 &lt;img src=&quot;https://user-images.githubusercontent.com/70383140/108599750-6a62fd80-73d6-11eb-937d-8748ebf65619.jpg&quot; alt=&quot;doit_bit&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;C언어 코딩=&quot;&quot; 도장=&quot;&quot;&gt;. p60-p148
![coding_dojang](https://user-images.githubusercontent.com/70383140/108599609-87e39780-73d5-11eb-8b73-9c6730edbb0c.jpg){:width=48 height=38}
- Unit 3 (문자열, 서식지정자)
- Unit 4 (세미콜론, 주석,중괄호, 들여쓰기)
- Unit 5, Unit 6 (변수선언, 중단점)
- Unit 7, Unit 8 (정수/실수형 변수, 오버/언더플로우, 자료형 크기, 최소/최대)




&lt;/C언어&gt;
  &lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;fullfill&quot;&gt;Fullfill&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;C포자를 위한=&quot;&quot; C언어=&quot;&quot;&gt;. p117-?(변수)
&lt;/C포자를&gt;
  &lt;/li&gt;
  &lt;li&gt;매일x
1강~3강(3강 bit,byte 부호 있는/없는 자료형 해석 이해하는데 어려웠음.)&lt;/li&gt;
  &lt;li&gt;성공.+코딩도장 사이트에서 퀴즈 풀기&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;supplement&quot;&gt;Supplement&lt;/h2&gt;
&lt;p&gt;Like all other events, it’s my defect.
Please don’t work hard at JUST first time…..and do constantly.
So my next week’s goal is …..finishing  &amp;lt;C언어 코딩 도장 1&amp;gt; and make python_project(same at the Youtube https://youtu.be/Dkx8Pl6QKW0)&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>hayeonBaek</name>
        
        
      </author>

      

      
        <category term="Hayeon" />
      

      
        <summary type="html">Feb_third week Goal . p117-p176(변수,printf,연산자,형변환)</summary>
      

      
      
    </entry>
  
</feed>
